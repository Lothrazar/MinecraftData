[
    { 'A individual recipe'
        "ingredients": [
            { 'an item group that can be moved seperately from other groups'
                "items": [
                    [ 'A individual line of ingredients (left to right)'
                        {} 'A skipped slot',
                        {
                            "item": "The item in data tag format",
                            "id": 'Optional, the ingredient id used for functions as integer'
                        }
                    ]
                ],
                "can_move": true/false 'if this item group can be moved, in the recipe',
                "can_mirror": true/false 'if this item group can be mirrored left to right, in the recipe',
                "can_flip": true/false 'if this item group can be flipped upside down, in the recipe'
            }
        ],
        "optional_ingredients": [
            { 'an item group that can be moved seperately from other groups'
                "items": [ 'A individual line of ingredients (left to right)'
                    {} 'A skipped slot',
                    {
                        "item": "The item in data tag format",
                        "id": 'Optional, the ingredient id used for functions as integer'
                    }
                ],
                "can_move": true/false 'if this item group can be moved, in the recipe',
                "can_mirror": true/false 'if this item group can be mirrored left to right, in the recipe',
                "can_flip": true/false 'if this item group can be flipped upside down, in the recipe',
                "min_groups": 'optional (default: 1): the minimum amount of slots that can contain this ingredient',
                "max_groups": 'optional (default: -1 (unlimited)): the maximum amount of slots that can be used by this ingredient'
            }
        ],
        "optional_ingredients_required": [
            "min": 'the minimum amount of optional ingredient groups required',
            "max": 'the maximum amount of optional ingredient groups required (-1 = unlimited)'
        ],
        "return": "The item you craft in data tag format",
        "functions": 'Optional, for special modifications' [
            {
                "function": "minecraft:return_items" 'For keeping/replacing items in certain slots, like the buckets when making a cake',
                "id": 'The id of the item in the ingredients as integer',
                "return": "the item to replace the original item with, leaving as a empty will give the player the item it had put in",
                "nbt": "Optional, what tags to keep, empty means all tags, {} means none"
            },
            {
                "function": "minecraft:zoom_map" 'For Zooming in/out a map',
                "zoom_level": 'How much the map should zoom in, as an integer, negative values means zooming out',
                "zoom_from": "Where the map should be zoomed in/out from, allowed values are: center, top, bottom, left, right, top_left, top_right, bottom_left, bottom_right"
            },
            {
                "function": "minecraft:copy_nbt" 'For adding NBT data from the tag tag to the returning item',
                "id": 'The id to copy the NBT from as integer, note, this runs before Return runs, meaning the NBT from return is adding/replacing on top of the copied NBT',
                "copy": "Optional, what tag to copy, empty means all tags",
                "paste": "Optional, where to paste the tag, empty for same path as copy"
            },
            {
                "function": "minecraft:repair" 'For setting damage value compared to the other ingredients (only useable on items with durability)',
                "ids": [
                    'list of id's that get the durability combined into the final item'
                ],
                "bonus": 'adittional percentage of bonus durability the returned item gets'
            },
            {
                "function": "minecraft:add_nbt" 'For adding nbt, only used with optional_ingredients',
                "id": 'The id of the item in the ingredients as integer',
                "nbt": "The tag(s) it adds",
                "overwrite": true/false 'if the tags should replace existing tags with the same path (if false and not a string, the number will be added/substracted from)'
            },
            {
                "function": "minecraft:color" 'For coloring armor and fireworks',
                "coloring": "What exactly get's colored, so the correct calculation gets used, allowed values are: armor, fireworks, fireworks_fade, potion",
                "id": 'The id of the item in the ingredients as integer',
                "color": "The color value to add (decimal)"
            }
        ]
    }
]

Notes: 
First runs copy_nbt, then the nbt of return and then the nbt of add_nbt
When NBT is copied, and a list which already exists is being specified in return, it adds to the end of the list, unless the returned list is empty.
If the same id is found multiple times in the same recipe, it'll apply the function to all of them